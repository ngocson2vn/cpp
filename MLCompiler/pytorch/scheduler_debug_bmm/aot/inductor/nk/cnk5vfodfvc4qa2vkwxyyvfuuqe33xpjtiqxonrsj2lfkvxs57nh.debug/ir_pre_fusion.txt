op0: ExternKernelSchedulerNode(ExternKernelOut)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelOut
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[3, 31, 64], stride=[1984, 64, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False)]
]
op0.node.kernel = extern_kernels.bmm


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 5952})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 5952})]
op1.met_dependencies = []
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[3, 31, 64], stride=[1984, 64, 1])
    buf1.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (5952, 1)
op1.sizes = ([5952], [])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[3, 31, 64], stride=[1984, 64, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[3, 31, 64], stride=[1984, 64, 1])
class op1_loop_body:
    var_ranges = {p0: 5952}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        sigmoid = ops.sigmoid(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1', get_index_1, sigmoid, None)
        return store


